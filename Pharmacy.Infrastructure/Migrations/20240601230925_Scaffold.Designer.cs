// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pharmacy.Infrastructure.Data;

#nullable disable

namespace Pharmacy.Infrastructure.Migrations
{
    [DbContext(typeof(PharmacyDbContext))]
    [Migration("20240601230925_Scaffold")]
    partial class Scaffold
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.31")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Pharmacy.Core.Entities.General.Case", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Case", (string)null);
                });

            modelBuilder.Entity("Pharmacy.Core.Entities.General.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("Pharmacy.Core.Entities.General.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Ingredient", (string)null);
                });

            modelBuilder.Entity("Pharmacy.Core.Entities.General.Medicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Dose")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Form")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ScientificName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TradeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Medicine", (string)null);
                });

            modelBuilder.Entity("Pharmacy.Core.Entities.General.MedicineCase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.Property<int>("Times")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex(new[] { "MedicineId", "CaseId" }, "Unique_MedicineId_CaseId")
                        .IsUnique();

                    b.ToTable("MedicineCase", (string)null);
                });

            modelBuilder.Entity("Pharmacy.Core.Entities.General.MedicineIngredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.Property<decimal>("Ratio")
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("MedicineId");

                    b.HasIndex(new[] { "IngredientId", "MedicineId" }, "Unique_MedicineId_IngredientId")
                        .IsUnique();

                    b.ToTable("MedicineIngredient", (string)null);
                });

            modelBuilder.Entity("Pharmacy.Core.Entities.General.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Patient", (string)null);
                });

            modelBuilder.Entity("Pharmacy.Core.Entities.General.Case", b =>
                {
                    b.HasOne("Pharmacy.Core.Entities.General.Patient", "Patient")
                        .WithMany("Cases")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("FK_Case_Patient");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Pharmacy.Core.Entities.General.Medicine", b =>
                {
                    b.HasOne("Pharmacy.Core.Entities.General.Category", "Category")
                        .WithMany("Medicines")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Medicine_Category");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Pharmacy.Core.Entities.General.MedicineCase", b =>
                {
                    b.HasOne("Pharmacy.Core.Entities.General.Case", "Case")
                        .WithMany("MedicineCases")
                        .HasForeignKey("CaseId")
                        .IsRequired()
                        .HasConstraintName("FK_MedicineCase_Case");

                    b.HasOne("Pharmacy.Core.Entities.General.Medicine", "Medicine")
                        .WithMany("MedicineCases")
                        .HasForeignKey("MedicineId")
                        .IsRequired()
                        .HasConstraintName("FK_MedicineCase_Medicine");

                    b.Navigation("Case");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("Pharmacy.Core.Entities.General.MedicineIngredient", b =>
                {
                    b.HasOne("Pharmacy.Core.Entities.General.Ingredient", "Ingredient")
                        .WithMany("MedicineIngredients")
                        .HasForeignKey("IngredientId")
                        .IsRequired()
                        .HasConstraintName("FK_MedicineIngredient_Ingredient");

                    b.HasOne("Pharmacy.Core.Entities.General.Medicine", "Medicine")
                        .WithMany("MedicineIngredients")
                        .HasForeignKey("MedicineId")
                        .IsRequired()
                        .HasConstraintName("FK_MedicineIngredient_Medicine");

                    b.Navigation("Ingredient");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("Pharmacy.Core.Entities.General.Case", b =>
                {
                    b.Navigation("MedicineCases");
                });

            modelBuilder.Entity("Pharmacy.Core.Entities.General.Category", b =>
                {
                    b.Navigation("Medicines");
                });

            modelBuilder.Entity("Pharmacy.Core.Entities.General.Ingredient", b =>
                {
                    b.Navigation("MedicineIngredients");
                });

            modelBuilder.Entity("Pharmacy.Core.Entities.General.Medicine", b =>
                {
                    b.Navigation("MedicineCases");

                    b.Navigation("MedicineIngredients");
                });

            modelBuilder.Entity("Pharmacy.Core.Entities.General.Patient", b =>
                {
                    b.Navigation("Cases");
                });
#pragma warning restore 612, 618
        }
    }
}
